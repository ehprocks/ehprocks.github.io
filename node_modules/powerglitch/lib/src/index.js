"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PowerGlitch = exports.mergeOptions = void 0;
/**
 * Get best-looking default options for most elements for a given playMode.
 */
const getDefaultOptions = (playMode = 'always') => {
    return {
        playMode,
        createContainers: true,
        hideOverflow: false,
        timing: playMode === 'always' ? { duration: 2 * 1000, iterations: Infinity } : { duration: 250, iterations: 1 },
        glitchTimeSpan: playMode === 'always' ? { start: 0.5, end: 0.7 } : { start: 0, end: 1, },
        shake: {
            velocity: 15,
            amplitudeX: 0.2,
            amplitudeY: 0.2,
        },
        slice: playMode === 'click' ? {
            count: 15,
            velocity: 20,
            minHeight: 0.02,
            maxHeight: 0.15,
            hueRotate: true,
        } : {
            count: 6,
            velocity: 15,
            minHeight: 0.02,
            maxHeight: 0.15,
            hueRotate: true,
        },
        pulse: false,
    };
};
/**
 * Glitch factor function, returns a value between 0 and 1 telling how much the animation should glitch at a given stepPct.
 */
const getGlitchFactor = (options, stepPct) => {
    if (!options.glitchTimeSpan) {
        return 1;
    }
    const glitchStart = options.glitchTimeSpan.start;
    const glitchEnd = options.glitchTimeSpan.end;
    if (stepPct < glitchStart || stepPct > glitchEnd) {
        return 0;
    }
    const glitchPeak = glitchStart + (glitchEnd - glitchStart) / 2;
    if (stepPct < glitchPeak) {
        return (stepPct - glitchStart) / (glitchPeak - glitchStart);
    }
    else {
        return (glitchEnd - stepPct) / (glitchEnd - glitchPeak);
    }
};
/**
 * Get a random value between -1 and 1, which biases towards the center if the animation should not glitch at the given `stepPct` moment.
 */
const getGlitchRandom = (options, stepPct) => {
    return (Math.random() - .5) * 2 * getGlitchFactor(options, stepPct);
};
/**
 * Get a random rectangle values in % to glitch. Percent values are between 0 and 100. Returns the rectangle as a CSS polygon.
 * @param minHeight Minimum height of the rectangle in percent, between 0 and 1.
 * @param maxHeight Maximum height of the rectangle in percent, between 0 and 1.
 * @param minWidth Minimum width of the rectangle in percent, between 0 and 1.
 * @param maxWidth Maximum width of the rectangle in percent, between 0 and 1.
 */
const getRandomRectanglePolygonCss = ({ minHeight, maxHeight, minWidth, maxWidth }) => {
    const height = Math.floor(Math.random() * ((maxHeight - minHeight) * 100 + 1)) + minHeight * 100;
    const width = Math.floor(Math.random() * ((maxWidth - minWidth) * 100 + 1)) + minWidth * 100;
    // Put this rectangle somewhere in the container so that it does not go out of the screen.
    const top = Math.floor(Math.random() * (100 - height));
    const left = Math.floor(Math.random() * (100 - width));
    const topRight = `${left + width}% ${top}%`;
    const bottomRight = `${left + width}% ${top + height}%`;
    const bottomLeft = `${left}% ${top + height}%`;
    const topLeft = `${left}% ${top}%`;
    return `polygon(${topRight},${bottomRight},${bottomLeft},${topLeft})`;
};
/**
 * Generate a slice layer, slicing part of the element and moving it somwhere else.
 * @param options
 */
const generateGlitchSliceLayer = (options) => {
    const stepCount = Math.floor(options.slice.velocity * options.timing.duration / 1000) + 1;
    const steps = [];
    for (let index = 0; index < stepCount; ++index) {
        if (getGlitchFactor(options, index / stepCount) === 0) {
            steps.push({
                opacity: '0',
                transform: 'none',
                clipPath: 'unset',
            });
            continue;
        }
        const translateX = getGlitchRandom(options, index / stepCount) * 30;
        const styles = {
            opacity: '1',
            transform: `translate3d(${translateX}%,0,0)`,
            clipPath: getRandomRectanglePolygonCss({ minHeight: options.slice.minHeight, maxHeight: options.slice.maxHeight, minWidth: 1, maxWidth: 1 }),
        };
        if (options.slice.hueRotate) {
            styles.filter = `hue-rotate(${Math.floor(getGlitchRandom(options, index / stepCount) * 360)}deg)`;
        }
        steps.push(styles);
    }
    return {
        steps,
        timing: Object.assign({ easing: `steps(${stepCount},jump-start)` }, options.timing),
    };
};
/**
 * Generate a pulse layer, a single transparent and growing layer.
 * @param options
 */
const generateGlitchPulseLayer = (options) => {
    return !options.pulse ? null : {
        steps: [
            { transform: 'scale(1)', opacity: '1', },
            { transform: `scale(${options.pulse.scale})`, opacity: '0', },
        ],
        timing: Object.assign(Object.assign({}, options.timing), { delay: (options.glitchTimeSpan ? options.glitchTimeSpan.start : 0) * options.timing.duration, easing: 'ease-in-out' }),
    };
};
/**
 * Generate the base layer, which may or may not shake depending on the options.
 * @param options
 */
const generateBaseLayer = (options) => {
    if (!options.shake) {
        return { steps: [], timing: {} };
    }
    const stepCount = Math.floor(options.shake.velocity * options.timing.duration / 1000) + 1;
    const steps = [];
    for (let index = 0; index < stepCount; ++index) {
        const translateX = getGlitchRandom(options, index / stepCount) * options.shake.amplitudeX * 100;
        const translateY = getGlitchRandom(options, index / stepCount) * options.shake.amplitudeY * 100;
        steps.push({
            transform: `translate3d(${translateX}%,${translateY}%,0)`,
        });
    }
    return {
        steps,
        timing: Object.assign({ easing: `steps(${stepCount},jump-start)` }, options.timing),
    };
};
/**
 * Generate the layers that deterministically define a glitch animation for the specified options.
 */
const generateLayers = (options) => [
    generateBaseLayer(options),
    generateGlitchPulseLayer(options),
    ...Array.from({ length: options.slice.count }).map(() => generateGlitchSliceLayer(options)),
].filter(entry => entry !== null);
/**
* Performs a deep merge of option objects and returns new object. Does not modify
* objects (immutable) and will ignore arrays.
* @param objects - Objects to merge
* @returns New object with merged key/values
*/
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mergeOptions = (...objects) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const isObject = (obj) => obj && typeof obj === 'object';
    return objects.reduce((prev, obj) => {
        Object.keys(obj)
            .forEach(key => {
            if (isObject(prev[key]) && isObject(obj[key])) {
                prev[key] = (0, exports.mergeOptions)(prev[key], obj[key]);
            }
            else if (obj[key] !== undefined) {
                prev[key] = obj[key];
            }
        });
        return prev;
    }, {});
};
exports.mergeOptions = mergeOptions;
/**
 * Prepare the DOM to set up the glitch effect.
 * @remarks
 * Depending on the element state:
 *  - Whether it was glitched before or not,
 *  - Whether current element display attributes
 *  - Whether options.createContainers is true/false
 * The top-level container and layer containers might be different objects and might need to be created.
 * @param element
 * @param options
 * @returns
 */
const prepareGlitchElement = (element, options) => {
    var _a, _b;
    // If not creating the containers
    if (!options.createContainers) {
        return {
            container: element,
            layersContainer: element,
            glitched: element.firstElementChild,
        };
    }
    // If first glitch
    if (!element.dataset.glitched) {
        // Setup the layer container using grid to stack elements
        const layersContainer = document.createElement('div');
        // If current element is an inline element
        const container = document.createElement('div');
        if (getComputedStyle(element).getPropertyValue('display').match(/^inline/)) {
            container.style.display = 'inline-block';
        }
        // Add the layers container to the global container
        container.appendChild(layersContainer);
        // Replace element with the new container
        (_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(container, element);
        layersContainer.prepend(element);
        return {
            container,
            layersContainer,
            glitched: element,
        };
    }
    // Not first glitch, with createContainers=true
    const layersContainer = element.parentElement;
    const container = (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement;
    // Remove all glitch layers but keep the first one (which is the original element)
    while (layersContainer.children.length > 1) {
        layersContainer.removeChild(layersContainer.children[1]);
    }
    // Cancel the animation on the first layer
    layersContainer.firstElementChild.getAnimations().forEach(animation => animation.cancel());
    return {
        container,
        layersContainer,
        glitched: element,
    };
};
/**
 * Given a set of computed layers and user options, glitch a given element
 * @param element
 * @param layers
 * @param options
 */
const glitchElement = (element, layers, options) => {
    const { glitched, container, layersContainer } = prepareGlitchElement(element, options);
    // Force grid display on the layer container
    layersContainer.style.display = 'grid';
    // Overflow
    if (options.hideOverflow) {
        container.style.overflow = 'hidden';
    }
    // If setting HTML manually
    if (options.html) {
        glitched.innerHTML = options.html;
    }
    // Stack original element too (it is used as the base shaking layer)
    glitched.style.gridArea = '1/1/-1/-1';
    // Base layer
    const baseLayer = glitched.cloneNode(true);
    // Stack this layer
    baseLayer.style.gridArea = '1/1/-1/-1';
    baseLayer.style.userSelect = 'none';
    baseLayer.style.pointerEvents = 'none';
    baseLayer.style.opacity = '0';
    for (let i = 0; i < layers.length - 1; ++i) {
        const layerDiv = baseLayer.cloneNode(true);
        layersContainer.appendChild(layerDiv);
    }
    // Glitch control functions
    const startGlitch = () => {
        layers.forEach((layer, i) => {
            layersContainer
                .children[i]
                .animate(layer.steps, layer.timing);
        });
    };
    const stopGlitch = () => {
        layers.forEach((_, i) => {
            layersContainer
                .children[i]
                .getAnimations()
                .forEach(animation => {
                animation.cancel();
            });
        });
    };
    // Depending on the selected play mode, orchestrate when to start/stop the glitch
    container.onmouseenter = null;
    container.onmouseleave = null;
    container.onclick = null;
    switch (options.playMode) {
        case 'always':
            startGlitch();
            break;
        case 'hover':
            container.onmouseenter = startGlitch;
            container.onmouseleave = stopGlitch;
            break;
        case 'click':
            container.onclick = () => { stopGlitch(); startGlitch(); };
            break;
    }
    // Mark the glitched element as glitched for next round
    element.dataset.glitched = '1';
    return { container, startGlitch, stopGlitch };
};
/**
 * Make a single element glitch.
 * @param elOrSelector What to glitch. Can be a query selector, a list of HTMLElement, an HTMLElement or a NodeList.
 * @param userOptions Optional glitch customization options.
 */
const glitch = (elOrSelector = '.powerglitch', userOptions = {}) => {
    // Fix options with defaults
    const options = (0, exports.mergeOptions)(getDefaultOptions(userOptions.playMode), userOptions);
    // Find elements to glitch
    let elements = [];
    if (typeof elOrSelector === 'string') {
        elements = Array.from(document.querySelectorAll(elOrSelector));
    }
    else if (elOrSelector instanceof NodeList) {
        elements = Array.from(elOrSelector);
    }
    else if (Array.isArray(elOrSelector)) {
        elements = elOrSelector;
    }
    else if (elOrSelector instanceof HTMLElement) {
        elements = [elOrSelector];
    }
    // Generate all animation layers
    const layers = generateLayers(options);
    // Animate each div element
    const entries = elements.map(element => glitchElement(element, layers, options));
    // Return list of containers and glitch control functions
    return {
        containers: entries.map(entry => entry.container),
        startGlitch: () => entries.forEach(entry => entry.startGlitch()),
        stopGlitch: () => entries.forEach(entry => entry.stopGlitch()),
    };
};
exports.PowerGlitch = {
    glitch,
    generateLayers,
    getDefaultOptions,
};
