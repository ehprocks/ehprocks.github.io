{"ast":null,"code":"import _objectSpread from \"C:/Users/Tommaso G/Documents/GitHub/ehprocks.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent(_ref) {\n  var preloadedFeatures = _ref.preloadedFeatures,\n    createVisualElement = _ref.createVisualElement,\n    useRender = _ref.useRender,\n    useVisualState = _ref.useVisualState,\n    Component = _ref.Component;\n  preloadedFeatures && loadFeatures(preloadedFeatures);\n  function MotionComponent(props, externalRef) {\n    /**\n     * If we need to measure the element we load this functionality in a\n     * separate class component in order to gain access to getSnapshotBeforeUpdate.\n     */\n    var MeasureLayout;\n    var configAndProps = _objectSpread(_objectSpread(_objectSpread({}, useContext(MotionConfigContext)), props), {}, {\n      layoutId: useLayoutId(props)\n    });\n    var isStatic = configAndProps.isStatic;\n    var context = useCreateMotionContext(props);\n    /**\n     * Create a unique projection ID for this component. If a new component is added\n     * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n     * us to measure it as soon as any layout effect flushes pending layout animations.\n     *\n     * Performance note: It'd be better not to have to search the DOM for these elements.\n     * For newly-entering components it could be enough to only correct treeScale, in which\n     * case we could mount in a scale-correction mode. This wouldn't be enough for\n     * shared element transitions however. Perhaps for those we could revert to a root node\n     * that gets forceRendered and layout animations are triggered on its layout effect.\n     */\n    var projectionId = isStatic ? undefined : useProjectionId();\n    var visualState = useVisualState(props, isStatic);\n    if (!isStatic && isBrowser) {\n      /**\n       * Create a VisualElement for this component. A VisualElement provides a common\n       * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n       * providing a way of rendering to these APIs outside of the React render loop\n       * for more performant animations and interactions\n       */\n      context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n      /**\n       * Load Motion gesture and animation features. These are rendered as renderless\n       * components so each feature can optionally make use of React lifecycle methods.\n       */\n      var initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n      var isStrict = useContext(LazyContext).strict;\n      if (context.visualElement) {\n        MeasureLayout = context.visualElement.loadFeatures(\n        // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n        configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n      }\n    }\n    /**\n     * The mount order and hierarchy is specific to ensure our element ref\n     * is hydrated by the time features fire their effects.\n     */\n    return React.createElement(MotionContext.Provider, {\n      value: context\n    }, MeasureLayout && context.visualElement ? React.createElement(MeasureLayout, _objectSpread({\n      visualElement: context.visualElement\n    }, configAndProps)) : null, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));\n  }\n  var ForwardRefComponent = forwardRef(MotionComponent);\n  ForwardRefComponent[motionComponentSymbol] = Component;\n  return ForwardRefComponent;\n}\nfunction useLayoutId(_ref2) {\n  var layoutId = _ref2.layoutId;\n  var layoutGroupId = useContext(LayoutGroupContext).id;\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\nexport { createMotionComponent };","map":{"version":3,"names":["React","forwardRef","useContext","MotionConfigContext","MotionContext","useVisualElement","useMotionRef","useCreateMotionContext","loadFeatures","isBrowser","useProjectionId","LayoutGroupContext","LazyContext","SwitchLayoutGroupContext","motionComponentSymbol","createMotionComponent","_ref","preloadedFeatures","createVisualElement","useRender","useVisualState","Component","MotionComponent","props","externalRef","MeasureLayout","configAndProps","_objectSpread","layoutId","useLayoutId","isStatic","context","projectionId","undefined","visualState","visualElement","initialLayoutGroupConfig","isStrict","strict","createElement","Provider","value","ForwardRefComponent","_ref2","layoutGroupId","id"],"sources":["C:/Users/Tommaso G/Documents/GitHub/ehprocks.github.io/node_modules/framer-motion/dist/es/motion/index.mjs"],"sourcesContent":["import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}