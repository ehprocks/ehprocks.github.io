{"ast":null,"code":"import _classCallCheck from \"C:/Users/Tommaso G/Documents/GitHub/ehprocks.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Tommaso G/Documents/GitHub/ehprocks.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MotionValue);\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"10.11.2\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n    this.lastUpdated = 0;\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n    this.canTrackVelocity = false;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v;\n      // Update timestamp\n      var delta = frameData.delta,\n        timestamp = frameData.timestamp;\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      }\n      // Update update subscribers\n      if (_this.prev !== _this.current && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      }\n      // Update velocity subscribers\n      if (_this.events.velocityChange) {\n        _this.events.velocityChange.notify(_this.getVelocity());\n      }\n      // Update render subscribers\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.velocityCheck = function (_ref) {\n      var timestamp = _ref.timestamp;\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n        if (_this.events.velocityChange) {\n          _this.events.velocityChange.notify(_this.getVelocity());\n        }\n      }\n    };\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @deprecated\n   */\n  _createClass(MotionValue, [{\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n      }\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      var _this2 = this;\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n      var unsubscribe = this.events[eventName].add(callback);\n      if (eventName === \"change\") {\n        return function () {\n          unsubscribe();\n          /**\n           * If we have no more change listeners by the start\n           * of the next frame, stop active animations.\n           */\n          sync.read(function () {\n            if (!_this2.events.change.getSize()) {\n              _this2.stop();\n            }\n          });\n        };\n      }\n      return unsubscribe;\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect, stopPassiveEffect) {\n      this.passiveEffect = passiveEffect;\n      this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = prev;\n      this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n  }, {\n    key: \"jump\",\n    value: function jump(v) {\n      this.updateAndNotify(v);\n      this.prev = v;\n      this.stop();\n      if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.current;\n    }\n    /**\n     * @public\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n      return this.canTrackVelocity ?\n      // These casts could be avoided if parseFloat would be typed better\n      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n  }, {\n    key: \"start\",\n    value: function start(startAnimation) {\n      var _this3 = this;\n      this.stop();\n      return new Promise(function (resolve) {\n        _this3.hasAnimated = true;\n        _this3.animation = startAnimation(resolve);\n        if (_this3.events.animationStart) {\n          _this3.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this3.events.animationComplete) {\n          _this3.events.animationComplete.notify();\n        }\n        _this3.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.animation) {\n        this.animation.stop();\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.animation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n      if (this.stopPassiveEffect) {\n        this.stopPassiveEffect();\n      }\n    }\n  }]);\n  return MotionValue;\n}();\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\nexport { MotionValue, motionValue };","map":{"version":3,"names":["frameData","sync","SubscriptionManager","velocityPerSecond","warnOnce","isFloat","value","isNaN","parseFloat","MotionValue","init","_this","options","arguments","length","undefined","_classCallCheck","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","change","notify","velocityChange","getVelocity","renderRequest","velocityCheck","_ref","hasAnimated","owner","_createClass","key","onChange","subscription","process","env","NODE_ENV","on","eventName","callback","_this2","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","jump","get","getPrevious","start","startAnimation","_this3","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue"],"sources":["C:/Users/Tommaso G/Documents/GitHub/ehprocks.github.io/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.11.2\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}